<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>arch on 蛋餅的競程隨筆</title><link>https://omeletwithoutegg.github.io/tags/arch/</link><description>Recent content in arch on 蛋餅的競程隨筆</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Omelet</copyright><lastBuildDate>Thu, 08 Sep 2022 21:26:22 +0800</lastBuildDate><atom:link href="https://omeletwithoutegg.github.io/tags/arch/index.xml" rel="self" type="application/rss+xml"/><item><title>Fzf fuzzy finder - best shell history picker</title><link>https://omeletwithoutegg.github.io/2022/09/08/fzf/</link><pubDate>Thu, 08 Sep 2022 21:26:22 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/09/08/fzf/</guid><description>FZF fuzzy finder fzf 是一個通用的模糊搜尋（fuzzy find）工具，用 go 寫成。
很久以前就聽過它了，但以為自己不太需要這種東西。
前陣子在尋找類似於 zsh-history-substring-search 的工具，也就是我可以打一些關鍵的字之後讓 zsh 從歷史紀錄裡面找類似的指令幫我貼到 shell 裡面。
而這個功能我認為我目前找到用起來最順手的就是 fzf 的 history widget 了。
安裝 可以用 linux distro 提供的 package manager 安裝
1 sudo pacman -S fzf 1 sudo apt-get install fzf 1 brew install fzf 或者也可以透過 vim 的 plugin manager 作為一個 vim 的 plugin 安裝。
1 Plug &amp;#39;junegunn/fzf&amp;#39;, { &amp;#39;do&amp;#39;: { -&amp;gt; fzf#install() } } （我個人比較不喜歡這樣的方法）</description></item><item><title>又是 Arch Install：在 HP 筆電上面雙系統與 secure boot</title><link>https://omeletwithoutegg.github.io/2022/08/31/arch-install-202208/</link><pubDate>Wed, 31 Aug 2022 17:16:20 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/08/31/arch-install-202208/</guid><description>緣由 這麼快的時間就發下一篇 archlinux 的文，我真的覺得我越來越是 BTW I use arch 的人了XD
不過這次裝 archlinux 也是有理由的，因為我從 NPSC 拿到的筆電的電池壞掉了，如果沒有插著電就會直接關機，想說就順便換了一台新的筆電。因為奇怪的堅持不想用 Mac，選了選之後最後是挑 HP pavilion plus 14。
上次因為是想要整台變成 Linux 所以比較不用煩惱一些問題，這次我希望能夠雙系統 Windows 並且可以玩一些遊戲，會需要有 secure boot 的功能所以也有比較不同的設定；此外這次也有碰到各種不同的問題，作為紀錄以及希望能幫助有遇到類似問題的人就發一篇文吧 :P
流水帳 事前需要的材料 不一定要用但我有用到
USB device * 2 （一支會要灌 iso 進去讓資料整個不見，另一支是拿來備份一些小東西的） 可以上網的手機 &amp;amp; 電腦 &amp;amp; wifi-AP 電源線 大綱 首先直接跑 Windows 安裝引導把 Windows 用正常的方式安裝好，接著使用 USB 開機的方式啟動 live environment，在各種 trial-and-error 之後終於把各種硬體問題排除，最後再裝 Desktop Environment 與各種 GUI/CLI apps。
prepare installation medium 請參考 archwiki
將一支可以清空的隨身碟插在可以上網的電腦當中 下載 archlinux_iso。假設下載的 iso 檔放在 $HOME/Downloads/archlinux-2022.</description></item><item><title>Minecraft Launcher Murmur</title><link>https://omeletwithoutegg.github.io/2022/04/16/minecraft-launcher-murmur/</link><pubDate>Sat, 16 Apr 2022 17:32:05 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/04/16/minecraft-launcher-murmur/</guid><description>抱怨一下 Minecraft Launcher 之前我都是用 這個 AUR package 作為 Minecraft launcher，但某個時間點之後發現登入帳號之後下面有一行小字寫說什麼無法成功記住你的登入 session 之類的，下次就必須重新進去那個跑很慢的視窗輸入密碼。
Minecraft 官網上對這個警告的指示是這樣子的：
https://help.minecraft.net/hc/en-us/articles/4408668374925-Secure-Token-Storage-Failure-on-Linux
也就是說，即使不是 GNOME desktop 也叫你要去裝 gnome-keyring 這個套件，照做之後果然可以成功記住我的身份。
又有一陣子很久沒玩，重新打開之後發現他竟然要我輸入 gnome-keyring 的不知道什麼密碼，而且還不能 focus 在其他視窗上讓我查一下密碼到底是啥，必須取消輸入密碼才能點其他視窗，真的雷雷。不過其實那個密碼忘記了也沒怎樣，只是要每次重新登入而已。今天剛好比較閒，查了非常久 gnome-keyring 要怎麼用，看網路上的各個教學跟 archwiki 上寫的都不太一樣，根本不知道要改什麼檔案，不過我得知了正常來說，跳出來的那個視窗要我輸入的密碼跟登入 desktop session 的密碼要是一樣的才對，也就是所謂的「login key」，而不是「Default key」。
而且有一個很奇怪的點是這樣子的：我開機登入 KDE 之後 ps aux | grep gnome 會知道說 gnome-keyring-daemon 有在跑，然後直接打開 minecraft-launcher 會先跳出紅色 error 過一陣子才成功登進去，多重開機幾次之後他彷彿就被玩壞了一樣沒辦法自動登入了QQ，跑去把一些檔案（~/.local/share/keyring 跟 ~/.minecraft/launcher_accounts.json 之類的）刪一刪改一改才讓他變回正常，但再重開機幾次又變神秘了。
最後覺得放棄使用他才是最好的選擇（所以我也沒研究怎樣正確的設定 gnome-keyring 使用 login key 而不是 default key），缺點只是每次要重新登入。才突然想到我可以去 AUR 看有沒有人在講有關的解決方式，意外翻到 polymc 這個 package，popularity 竟然比原本的還多，安裝之後發現他的 UI 看起來不錯，所以我就想說乾脆來研究 polymc 怎麼用。</description></item><item><title>Qutebrowser 瀏覽器</title><link>https://omeletwithoutegg.github.io/2022/03/29/qutebrowser/</link><pubDate>Tue, 29 Mar 2022 10:13:55 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/03/29/qutebrowser/</guid><description>Qutebrowser: vim-like browser 這是一篇推薦文與介紹文。
已經忘記開始使用 qutebrowser 的契機是什麼了，可能是看到（東東）學長用覺得很酷。
在熟悉 vim 之後，qutebrowser 作為一個「Keyboard-driven」的瀏覽器吸引力會大大提昇，其 UI 簡潔與配置的靈活也讓我愛不釋手
Installation https://qutebrowser.org/doc/install.html
在 Arch 下安裝不是難事。
1 2 3 4 sudo pacman -S qutebrowser # Some optional dependencies sudo pacman -S pdfjs python-adblock python-tldextract \ python-pygments python-babel Ubuntu 也一樣是 sudo apt install qutebrowser 就可以了，但是版本似乎有點舊，以下提到的有些功能可能沒有或是行為不一樣。
Keybind 簡介 首先，hjkl 跟 vim 一樣是上下左右。
使用 : 就可以進入 command mode，當然一樣可以使用各種快捷鍵來做各種瀏覽器內的操作。
以下是平常最常用的 keybindings！
command keybinding 功能 :open {url} o 在目前的分頁開啟某個 URL :open -t {url} O 在新分頁開啟某個 URL :tab-close d 關閉目前的分頁 :undo u 重新開啟前一次關閉的分頁或視窗 :tab-prev J 下一個分頁（右邊） :tab-next K 上一個分頁（左邊） :back H 回到上一頁 :forward L 回到下一頁 :set-cmd-text :open {url:pretty} go 打開網址列（？） :zoom-in + 增加縮放倍數 :zoom-out - 減少縮放倍數 :zoom = 重置縮放倍數 :reload r 重新整理 :reload -f R 強制重新整理 :yank yy 複製網址列 :open -- {clipboard} pp 打開剪貼簿所複製的網址 :open -t -- {clipboard} Pp 在新分頁打開剪貼簿所複製的網址 :tab-move + gJ 把目前的分頁往上（右邊）移動 :tab-move - gK 把目前的分頁往下（左邊）移動 :q 關閉目前的視窗 :quit --save ZZ 關閉 qutebrowser （這會關閉所有視窗） 下面是在瀏覽一個頁面的時候的一些移動方法：</description></item><item><title>Arch Install 202202</title><link>https://omeletwithoutegg.github.io/2022/02/08/arch-install-202202/</link><pubDate>Tue, 08 Feb 2022 08:30:33 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/02/08/arch-install-202202/</guid><description>安裝 arch 這篇文章是分享與紀錄我在筆電上裝 arch-linux 的過程，其實要裝還是直接看 arch wiki 最快XD 不過那個頁面沒有講怎麼裝 bootloader 與桌面環境。
製作開機隨身碟（Live USB） 下載 .iso 檔案，並將其寫入 USB 當中（假設 USB 是 /dev/sdb）。
1 dd bs=4M if=~/Downloads/archlinux-2022.02.01-x86_64.iso of=/dev/sdb &amp;amp;&amp;amp; sync 使用隨身碟開機 通常在開機時按下某個按鍵可以進入選擇開機媒介的選單，例如我現在這台 ASUS 的筆電就是在出現 logo 時按 F2 就會出現選單，在 boot 的地方可以選擇用
usb 開機。
在使用隨身碟（使用 live 環境）開機時會有 .iso 裡面自帶的套件可以用，例如 vim、iwd、zsh 等等指令，但這些套件在安裝完成的 arch 裡面不會自動附上。
確認啟動模式 1 ls /sys/firmware/efi/efivars 如果指令沒有報錯，則系統在 UEFI 模式下啓動。如果目錄不存在，系統可能以 BIOS 或 CSM 模式啓動。
連上網路 使用 iwctl 連上 Wi-Fi 網路</description></item><item><title>Miku Cursor on Arch Linux</title><link>https://omeletwithoutegg.github.io/2020/12/10/arch-miku-mouse/</link><pubDate>Thu, 10 Dec 2020 17:05:06 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2020/12/10/arch-miku-mouse/</guid><description>在Arch的初音游標 因為在Windows有下載一個可愛的初音游標，但是之前換成Ubuntu後就沒有把他裝回來，覺得很可惜。
因此現在換成Arch之後，想說應該有一些社群的package可以用了，直接抓來就好，但是怎麼google都google不到？
因此大概花了半天去解決他，想說在這邊做個小筆記以免下次重裝的時候重摸一遍。
找到巴哈姆特上面的原始檔（是.ani跟.cur） 利用cursor-converter把.ani和.cur換成x-cursor的icon類型 手動把對應的圖案複製到 ~/.icons/$THEME/cursors 裡面
如果不知道哪個檔名是什麼的話，可以先複製別的theme的資料夾，接著用 xcur2png 換成 png看某個檔案實際上是對應哪個圖案。 加上 index.theme。反正只要有Name就可以了吧我猜 中間踩了各種怪東西XD
我原本先去下載了其他主題，想說看別的主題的游標應該是什麼對應到什麼，尤其是有動畫的。
不過似乎有動畫的游標和沒動畫的檔名一樣QQ
然後有找到一個ani2png，但是畫質會爆炸而且沒有幫忙放到對應的位置（雖然最後也是我們自己放到對應的位置）
接著找到CSDN上面有人說用CursorXP從Windows上面把游標主題包起來，接著在Linux下載一個用來轉換成icon類型的Perl腳本，
會轉換成一個tar.gz然後就可以安裝的樣子了，不過還是偏糟，從Windows上面看就發現畫質還是大小大爆炸了
最後終於走對路，找到github上面一個比較新的repo是把.ani跟.cur轉成linux的x-cursor檔案
真是要感謝他們www
話說我發現其實可以直接把檔案放到github上面，這樣也可以推廣或是找人來修改(X
裡面有好多icon是從breeze主題抄過來的，畢竟應該都是很少看到的icon所以應該不會影響太大，但是想包成AUR或是什麼的時候好像就得在乎一點一致性ㄌ，所以希望放到github上之後有人可以把其他那些icon改成統一的風格owo</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on 蛋餅的競程隨筆</title><link>https://omeletwithoutegg.github.io/tags/linux/</link><description>Recent content in linux on 蛋餅的競程隨筆</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Omelet</copyright><lastBuildDate>Sun, 17 Jul 2022 07:07:20 +0800</lastBuildDate><atom:link href="https://omeletwithoutegg.github.io/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Kde Zoom Shortcut</title><link>https://omeletwithoutegg.github.io/2022/07/17/kde-zoom-shortcut/</link><pubDate>Sun, 17 Jul 2022 07:07:20 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/07/17/kde-zoom-shortcut/</guid><description>KDE Zoom In/Out 一篇已知用火的廢文。
在第一次換成 linux 之後發現的一個 windows 的好處就是，我只要用觸控版兩根手指同時向外滑，就可以滑順的放大螢幕某個部份，並且是以游標為中心被放大。
換成 Ubuntu 之後，沒有了這樣的手勢其實有點不習慣。
在換成 Arch+KDE 之後，也早就已經習慣用瀏覽器內建的 ctrl + =、 ctrl + - 來縮放了，但缺點是不會以游標為中心放大，並且會 trigger RWS，改變排版，此外放大的比例比較離散，會有一段一段跳的感覺。
不過前幾天意外按到 meta + =（meta 鍵相當於 win 鍵），發現自己螢幕被放大了！已知用火的感覺真好。
經過一番探索之後，我發現這是 KDE 中 KWin 的 Zoom In / Zoom Out 功能，只要按 meta + = 或 meta + - 就可以放大整個螢幕，並且游標超出去的時候會跟著平移放大的部份。
今天要發文的時候發現有 magnify 這個功能，在 Desktop Effect 當中可以調整，用起來感覺使用者體驗更好一點
用起來大概長這樣</description></item><item><title>Minecraft Launcher Murmur</title><link>https://omeletwithoutegg.github.io/2022/04/16/minecraft-launcher-murmur/</link><pubDate>Sat, 16 Apr 2022 17:32:05 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/04/16/minecraft-launcher-murmur/</guid><description>抱怨一下 Minecraft Launcher 之前我都是用 這個 AUR package 作為 Minecraft launcher，但某個時間點之後發現登入帳號之後下面有一行小字寫說什麼無法成功記住你的登入 session 之類的，下次就必須重新進去那個跑很慢的視窗輸入密碼。
Minecraft 官網上對這個警告的指示是這樣子的：
https://help.minecraft.net/hc/en-us/articles/4408668374925-Secure-Token-Storage-Failure-on-Linux
也就是說，即使不是 GNOME desktop 也叫你要去裝 gnome-keyring 這個套件，照做之後果然可以成功記住我的身份。
又有一陣子很久沒玩，重新打開之後發現他竟然要我輸入 gnome-keyring 的不知道什麼密碼，而且還不能 focus 在其他視窗上讓我查一下密碼到底是啥，必須取消輸入密碼才能點其他視窗，真的雷雷。不過其實那個密碼忘記了也沒怎樣，只是要每次重新登入而已。今天剛好比較閒，查了非常久 gnome-keyring 要怎麼用，看網路上的各個教學跟 archwiki 上寫的都不太一樣，根本不知道要改什麼檔案，不過我得知了正常來說，跳出來的那個視窗要我輸入的密碼跟登入 desktop session 的密碼要是一樣的才對，也就是所謂的「login key」，而不是「Default key」。
而且有一個很奇怪的點是這樣子的：我開機登入 KDE 之後 ps aux | grep gnome 會知道說 gnome-keyring-daemon 有在跑，然後直接打開 minecraft-launcher 會先跳出紅色 error 過一陣子才成功登進去，多重開機幾次之後他彷彿就被玩壞了一樣沒辦法自動登入了QQ，跑去把一些檔案（~/.local/share/keyring 跟 ~/.minecraft/launcher_accounts.json 之類的）刪一刪改一改才讓他變回正常，但再重開機幾次又變神秘了。
最後覺得放棄使用他才是最好的選擇（所以我也沒研究怎樣正確的設定 gnome-keyring 使用 login key 而不是 default key），缺點只是每次要重新登入。才突然想到我可以去 AUR 看有沒有人在講有關的解決方式，意外翻到 polymc 這個 package，popularity 竟然比原本的還多，安裝之後發現他的 UI 看起來不錯，所以我就想說乾脆來研究 polymc 怎麼用。</description></item><item><title>Qutebrowser 瀏覽器</title><link>https://omeletwithoutegg.github.io/2022/03/29/qutebrowser/</link><pubDate>Tue, 29 Mar 2022 10:13:55 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/03/29/qutebrowser/</guid><description>Qutebrowser: vim-like browser 這是一篇推薦文與介紹文。
已經忘記開始使用 qutebrowser 的契機是什麼了，可能是看到（東東）學長用覺得很酷。
在熟悉 vim 之後，qutebrowser 作為一個「Keyboard-driven」的瀏覽器吸引力會大大提昇，其 UI 簡潔與配置的靈活也讓我愛不釋手
Installation https://qutebrowser.org/doc/install.html
在 Arch 下安裝不是難事。
1 2 3 4 sudo pacman -S qutebrowser # Some optional dependencies sudo pacman -S pdfjs python-adblock python-tldextract \ python-pygments python-babel Ubuntu 也一樣是 sudo apt install qutebrowser 就可以了，但是版本似乎有點舊，以下提到的有些功能可能沒有或是行為不一樣。
Keybind 簡介 首先，hjkl 跟 vim 一樣是上下左右。
使用 : 就可以進入 command mode，當然一樣可以使用各種快捷鍵來做各種瀏覽器內的操作。
以下是平常最常用的 keybindings！
command keybinding 功能 :open {url} o 在目前的分頁開啟某個 URL :open -t {url} O 在新分頁開啟某個 URL :tab-close d 關閉目前的分頁 :undo u 重新開啟前一次關閉的分頁或視窗 :tab-prev J 下一個分頁（右邊） :tab-next K 上一個分頁（左邊） :back H 回到上一頁 :forward L 回到下一頁 :set-cmd-text :open {url:pretty} go 打開網址列（？） :zoom-in + 增加縮放倍數 :zoom-out - 減少縮放倍數 :zoom = 重置縮放倍數 :reload r 重新整理 :reload -f R 強制重新整理 :yank yy 複製網址列 :open -- {clipboard} pp 打開剪貼簿所複製的網址 :open -t -- {clipboard} Pp 在新分頁打開剪貼簿所複製的網址 :tab-move + gJ 把目前的分頁往上（右邊）移動 :tab-move - gK 把目前的分頁往下（左邊）移動 :q 關閉目前的視窗 :quit --save ZZ 關閉 qutebrowser （這會關閉所有視窗） 下面是在瀏覽一個頁面的時候的一些移動方法：</description></item><item><title>Arch Install 202202</title><link>https://omeletwithoutegg.github.io/2022/02/08/arch-install-202202/</link><pubDate>Tue, 08 Feb 2022 08:30:33 +0800</pubDate><guid>https://omeletwithoutegg.github.io/2022/02/08/arch-install-202202/</guid><description>安裝 arch 這篇文章是分享與紀錄我在筆電上裝 arch-linux 的過程，其實要裝還是直接看 arch wiki 最快XD 不過那個頁面沒有講怎麼裝 bootloader 與桌面環境。
製作開機隨身碟（Live USB） 下載 .iso 檔案，並將其寫入 USB 當中（假設 USB 是 /dev/sdb）。
1 dd bs=4M if=~/Downloads/archlinux-2022.02.01-x86_64.iso of=/dev/sdb &amp;amp;&amp;amp; sync 使用隨身碟開機 通常在開機時按下某個按鍵可以進入選擇開機媒介的選單，例如我現在這台 ASUS 的筆電就是在出現 logo 時按 F2 就會出現選單，在 boot 的地方可以選擇用
usb 開機。
在使用隨身碟（使用 live 環境）開機時會有 .iso 裡面自帶的套件可以用，例如 vim、iwd、zsh 等等指令，但這些套件在安裝完成的 arch 裡面不會自動附上。
確認啟動模式 1 ls /sys/firmware/efi/efivars 如果指令沒有報錯，則系統在 UEFI 模式下啓動。如果目錄不存在，系統可能以 BIOS 或 CSM 模式啓動。
連上網路 使用 iwctl 連上 Wi-Fi 網路</description></item><item><title>Using-Vim</title><link>https://omeletwithoutegg.github.io/2020/07/08/Using-Vim/</link><pubDate>Wed, 08 Jul 2020 01:15:12 +0000</pubDate><guid>https://omeletwithoutegg.github.io/2020/07/08/Using-Vim/</guid><description>vim ?! vim : 古老的編輯器
來由 之前 ZCK 很早就開始一直推坑 vim ，而我大概是在開始瘋狂玩 OJDL 之後才開始使用 vim 的
因為在遠端 server 上改 code 最直接的方式就是使用遠端主機上的 vim 直接在 ssh 的介面改
所以經過幾個月(我也不知道具體多久)我大概熟悉 vim 了之後，在我的筆電上也裝了 gvim
因為是 windows 的所以用起來很怪，不過經過 Google 一些設定之後變得正常一些了
至於我的筆電呢，我覺得裝 linux 的必要性還沒有麻煩性高(X
而且感覺arch &amp;gt; Ubuntu但是裝了arch又會因為更新速度出現各種神奇的事件
所以姑且先不裝(?)
一些心得 我覺得 vim 的優點可能就是讓你可以只使用鍵盤編輯文件，
再來就是你可以依照自己的喜好更改 vimrc 或是安裝插件
此外記憶這些快捷鍵也是很有成就感的事情(?)
變魔法的快速鍵就跟突然講起德語或上古漢語一樣吸引人目光
my vimrc 附上我自己的 vimrc
一開始我沒有裝任何插件，後來查到一篇使用 Vundle 的就去載了
最後跟風(?)改成用 vim-plug 管理所有插件
物色自己喜歡的插件真的很難，可能害我熬夜了好幾次QQ
不知道過了一段時間之後我的 vimrc 又會變成什麼樣子
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 set nocompatibleset encoding=utf8set fileencoding=utf8&amp;#34;&amp;#34;&amp;#34; Plugins, use &amp;#39;vim-plug&amp;#39; to manage pluginscall plug#begin(&amp;#39;~/.</description></item></channel></rss>